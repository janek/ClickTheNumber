{"version":3,"sources":["pages/pages.js","components/Footer/Footer.js","components/Button/Button.js","pages/Introduction.js","lib/Timer.js","components/NumberBox/NumberBox.js","pages/Game.js","pages/Score.js","pages/PageRenderer.js","lib/goFullscreen.js","components/App.js","lib/RandomRange.js","index.js"],"names":["pages","INTRODUCTION","GAME","SCORE","Footer","className","rel","target","href","Button","isLifted","isSmall","children","onClick","type","classnames","lifted","small","Introduction","startGame","goFullscreen","this","startTime","endTime","window","performance","now","NumberBox","n","currentNumber","handleGameClick","active","onMouseDown","Game","Timer","start","stop","props","updateElapsedTime","getElapsed","randomNumbers","map","key","Component","gameDoneMessages","Score","showIntroduction","elapsedTime","random","toFixed","getElapsedSeconds","PageRenderer","currentState","page","element","document","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","NUMBER_BOX_COUNT","App","state","clickedNumber","nextNumber","setState","toNumber","shuffle","Array","keys","doneBody","ReactDOM","render","getElementById"],"mappings":"wYAAaA,EAAQ,CACnBC,aAAc,eACdC,KAAM,OACNC,MAAO,SCMMC,G,MANA,kBACb,4BAAQC,UAAU,UAAlB,6BACkB,uBAAGC,IAAI,sBAAsBC,OAAO,SAASC,KAAK,mDAAlD,WCoBLC,G,MAZA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,QAASC,EAAtB,EAAsBA,SAAUC,EAAhC,EAAgCA,QAAhC,OACb,4BACEC,KAAK,SACLT,UAAWU,IAAW,MAAO,CAAEC,OAAQN,EAAUO,MAAON,IACxDE,QAASA,GAERD,KCIUM,G,MAbM,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,aAAd,OACnB,0BAAMf,UAAU,gBACd,wBAAIA,UAAU,SAAd,qBACA,wBAAIA,UAAU,YAAd,8DACA,kBAAC,EAAD,CAAQQ,QAASM,GAAjB,eACA,kBAAC,EAAD,CAAQR,SAAO,EAACE,QAASO,GAAzB,0BCIW,M,WAlBb,aAAe,oBACbC,KAAKC,UAAY,EACjBD,KAAKE,QAAU,E,oDAIfF,KAAKC,UAAYE,OAAOC,YAAYC,Q,6BAIpCL,KAAKE,QAAUC,OAAOC,YAAYC,Q,mCAIlC,OAAOL,KAAKE,QAAUF,KAAKC,c,MCQhBK,G,MAXG,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAGC,EAAN,EAAMA,cAAeC,EAArB,EAAqBA,gBAArB,OAChB,4BACEzB,UAAWU,IAAW,SAAU,CAAEgB,OAAQF,GAAiBD,IAC3DI,YAAa,kBAAMF,EAAgBF,KAElCA,KCJgBK,E,4LAEjBC,EAAMC,U,6CAIND,EAAME,OACNf,KAAKgB,MAAMC,kBAAkBJ,EAAMK,gB,+BAG3B,IAAD,EACmDlB,KAAKgB,MAAvDG,EADD,EACCA,cAAeX,EADhB,EACgBA,cAAeC,EAD/B,EAC+BA,gBAEtC,OACE,8BACGU,EAAcC,IAAI,SAAAb,GAAC,OAClB,kBAAC,EAAD,CACEA,EAAGA,EACHc,IAAKd,EACLC,cAAeA,EACfC,gBAAiBA,W,GApBKa,a,gBCc5BC,G,MAAmB,CACvB,cACA,WACA,WACA,iBACA,WACA,yBACA,2BAQaC,MA9BD,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,iBAAkBC,EAAkB,EAAlBA,YACjC,OACE,8BACE,yBAAK1C,UAAU,QACZ2C,IAAOJ,GADV,eAsBN,SAA2BG,GAEzB,OADuBA,EAAc,KACfE,QAAQ,GAvBeC,CAAkBH,GAD3D,KAGA,kBAAC,EAAD,CAAQlC,QAASiC,EAAkBpC,UAAQ,GAA3C,cCiCSyC,EA7BM,SAAC,GAOf,IAAD,IANJC,aAAgBC,EAMZ,EANYA,KAAMxB,EAMlB,EANkBA,cAAeW,EAMjC,EANiCA,cAAeO,EAMhD,EANgDA,YACpDjB,EAKI,EALJA,gBACAgB,EAII,EAJJA,iBACA3B,EAGI,EAHJA,UACAC,EAEI,EAFJA,aACAkB,EACI,EADJA,kBAEA,OAAIe,IAASrD,EAAME,KAEf,kBAAC,EAAD,CACE2B,cAAeA,EACfW,cAAeA,EACfV,gBAAiBA,EACjBQ,kBAAmBA,IAKrBe,IAASrD,EAAMG,MACV,kBAAC,EAAD,CAAO2C,iBAAkBA,EAAkBC,YAAaA,IAI1D,kBAAC,EAAD,CAAc5B,UAAWA,EAAWC,aAAcA,KClC5C,iBAZf,IAAsBkC,KAYYC,SAASC,iBAX7BC,kBACVH,EAAQG,oBACCH,EAAQI,qBACjBJ,EAAQI,uBACCJ,EAAQK,wBACjBL,EAAQK,0BACCL,EAAQM,qBACjBN,EAAQM,uB,mCCGNC,EAAmB,GA8CVC,E,2MA3CbC,MAAQ,CAAEV,KAAMrD,EAAMC,aAAc8C,YAAa,G,EACjDjB,gBAAkB,SAAAkC,GAAkB,IAE5BC,EADoB,EAAKF,MAAvBlC,cAC2B,EAC/BmC,IAAkBC,GACpB,EAAKC,SAAS,CAAErC,cAAeoC,IAG7BA,IAAeJ,GACjB,EAAKK,SAAS,CAAEb,KAAMrD,EAAMG,S,EAIhCgB,UAAY,WACV,IC1BgCgD,ED0B1B3B,GC1B0B2B,ED0BEN,ECzB7BO,IAAQ,YAAIC,MAAMF,GAAUG,SAAS7B,IAAI,SAAAb,GAAC,OAAIA,EAAI,KD0BvD,EAAKsC,SAAS,CAAEb,KAAMrD,EAAME,KAAM2B,cAAe,EAAGW,mB,EAGtDM,iBAAmB,WACjB,EAAKoB,SAAS,CAAEb,KAAMrD,EAAMC,gB,EAG9BqC,kBAAoB,SAAAS,GAClB,EAAKmB,SAAS,CAAEnB,iB,wEAIhB,OACE,yBAAK1C,UAAWU,IAAW,MAAO,CAAEwD,SAAUlD,KAAK0C,MAAMV,OAASrD,EAAMG,SACtE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEiD,aAAc/B,KAAK0C,MACnBjC,gBAAiBT,KAAKS,gBACtBX,UAAWE,KAAKF,UAChB2B,iBAAkBzB,KAAKyB,iBACvB1B,aAAcA,EACdkB,kBAAmBjB,KAAKiB,yB,GArChBK,a,MENlB6B,IAASC,OACP,kBAAC,EAAD,MACAlB,SAASmB,eAAe,W","file":"static/js/main.a94b3a65.chunk.js","sourcesContent":["export const pages = {\n  INTRODUCTION: \"INTRODUCTION\",\n  GAME: \"GAME\",\n  SCORE: \"SCORE\"\n};\n","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => (\n  <footer className=\"github\">\n    Made with ❤︎ by <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/lightningboss/ClickTheNumber\">Marc</a>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport './Button.css';\n\nconst propTypes = {\n  isLifted: PropTypes.bool,\n  isSmall: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.node,\n};\n\nconst Button = ({ isLifted, isSmall, children, onClick }) => (\n  <button\n    type=\"button\"\n    className={classnames('btn', { lifted: isLifted, small: isSmall })}\n    onClick={onClick}\n  >\n    {children}\n  </button>\n  );\n\nButton.propTypes = propTypes;\n\nexport default Button;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"../components/Button/Button\";\nimport \"./Introduction.css\";\n\nconst propTypes = {\n  startGame: PropTypes.func,\n  goFullscreen: PropTypes.func\n};\n\nconst Introduction = ({ startGame, goFullscreen }) => (\n  <main className=\"introduction\">\n    <h1 className=\"title\">Click The Number!</h1>\n    <h2 className=\"subtitle\">As fast as possible, click the numbers in ascending order.</h2>\n    <Button onClick={startGame}>Start Game.</Button>\n    <Button isSmall onClick={goFullscreen}>\n      Go Fullscreen first\n    </Button>\n  </main>\n);\n\nIntroduction.propTypes = propTypes;\n\nexport default Introduction;\n","class Timer {\n  constructor() {\n    this.startTime = 0;\n    this.endTime = 0;\n  }\n\n  start() {\n    this.startTime = window.performance.now();\n  }\n\n  stop() {\n    this.endTime = window.performance.now();\n  }\n\n  getElapsed() {\n    return this.endTime - this.startTime;\n  }\n}\n\nexport default new Timer();\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport './NumberBox.css';\n\nconst propTypes = {\n  n: PropTypes.number.isRequired,\n  currentNumber: PropTypes.number.isRequired,\n  handleGameClick: PropTypes.func.isRequired,\n};\n\nconst NumberBox = ({ n, currentNumber, handleGameClick }) => (\n  <button\n    className={classnames('number', { active: currentNumber >= n })}\n    onMouseDown={() => handleGameClick(n)}\n  >\n    {n}\n  </button>\n);\n\nNumberBox.propTypes = propTypes;\n\nexport default NumberBox;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Timer from \"../lib/Timer\";\nimport NumberBox from \"../components/NumberBox/NumberBox\";\n\nconst propTypes = {\n  randomNumbers: PropTypes.array.isRequired,\n  currentNumber: PropTypes.number.isRequired,\n  handleGameClick: PropTypes.func.isRequired,\n  updateElapsedTime: PropTypes.func.isRequired\n};\n\nexport default class Game extends Component {\n  componentDidMount() {\n    Timer.start();\n  }\n\n  componentWillUnmount() {\n    Timer.stop();\n    this.props.updateElapsedTime(Timer.getElapsed());\n  }\n\n  render() {\n    const { randomNumbers, currentNumber, handleGameClick } = this.props;\n\n    return (\n      <main>\n        {randomNumbers.map(n => (\n          <NumberBox\n            n={n}\n            key={n}\n            currentNumber={currentNumber}\n            handleGameClick={handleGameClick}\n          />\n        ))}\n      </main>\n    );\n  }\n}\n\nGame.propTypes = propTypes;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport random from \"just-random\";\n\nimport Button from \"../components/Button/Button\";\nimport \"./Score.css\";\n\nconst propTypes = {\n  showIntroduction: PropTypes.func.isRequired,\n  elapsedTime: PropTypes.number.isRequired\n};\n\nconst Score = ({ showIntroduction, elapsedTime }) => {\n  return (\n    <main>\n      <div className=\"done\">\n        {random(gameDoneMessages)} Your time: {getElapsedSeconds(elapsedTime)}s\n      </div>\n      <Button onClick={showIntroduction} isLifted>\n        New Game\n      </Button>\n    </main>\n  );\n};\n\nScore.propTypes = propTypes;\n\nconst gameDoneMessages = [\n  \"You did it!\",\n  \"Alright!\",\n  \"Awesome!\",\n  \"What the fuck.\",\n  \"Amazing!\",\n  \"Did you beat the boss?\",\n  \"This horse is amazing!\"\n];\n\nfunction getElapsedSeconds(elapsedTime) {\n  const elapsedSeconds = elapsedTime / 1000;\n  return elapsedSeconds.toFixed(3);\n}\n\nexport default Score;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { pages } from \"./pages\";\nimport Introduction from \"../pages/Introduction\";\nimport Game from \"../pages/Game\";\nimport Score from \"../pages/Score\";\n\nconst propTypes = {\n  currentState: PropTypes.shape({\n    page: PropTypes.string.isRequired,\n    currentNumber: PropTypes.number,\n    randomNumbers: PropTypes.arrayOf(PropTypes.number.isRequired),\n    elapsedTime: PropTypes.number.isRequired\n  }).isRequired,\n  handleGameClick: PropTypes.func.isRequired,\n  showIntroduction: PropTypes.func.isRequired,\n  startGame: PropTypes.func.isRequired,\n  goFullscreen: PropTypes.func.isRequired,\n  updateElapsedTime: PropTypes.func.isRequired\n};\n\nconst PageRenderer = ({\n  currentState: { page, currentNumber, randomNumbers, elapsedTime },\n  handleGameClick,\n  showIntroduction,\n  startGame,\n  goFullscreen,\n  updateElapsedTime\n}) => {\n  if (page === pages.GAME) {\n    return (\n      <Game\n        currentNumber={currentNumber}\n        randomNumbers={randomNumbers}\n        handleGameClick={handleGameClick}\n        updateElapsedTime={updateElapsedTime}\n      />\n    );\n  }\n\n  if (page === pages.SCORE) {\n    return <Score showIntroduction={showIntroduction} elapsedTime={elapsedTime} />;\n  }\n\n  // => page === pages.INTRODUCTION\n  return <Introduction startGame={startGame} goFullscreen={goFullscreen} />;\n};\n\nPageRenderer.propTypes = propTypes;\n\nexport default PageRenderer;\n","function goFullscreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element.mozRequestFullScreen) {\n    element.mozRequestFullScreen();\n  } else if (element.webkitRequestFullscreen) {\n    element.webkitRequestFullscreen();\n  } else if (element.msRequestFullscreen) {\n    element.msRequestFullscreen();\n  }\n}\n\nexport default () => goFullscreen(document.documentElement);\n","import React, { Component } from \"react\";\nimport classnames from \"classnames\";\n\nimport { pages } from \"../pages/pages\";\nimport Footer from \"../components/Footer/Footer\";\nimport PageRenderer from \"../pages/PageRenderer\";\nimport goFullscreen from \"../lib/goFullscreen\";\nimport randomRange from \"../lib/RandomRange\";\n\nimport \"./App.css\";\n\nconst NUMBER_BOX_COUNT = 25;\n\nclass App extends Component {\n  state = { page: pages.INTRODUCTION, elapsedTime: 0 };\n  handleGameClick = clickedNumber => {\n    const { currentNumber } = this.state;\n    const nextNumber = currentNumber + 1;\n    if (clickedNumber === nextNumber) {\n      this.setState({ currentNumber: nextNumber });\n    }\n\n    if (nextNumber === NUMBER_BOX_COUNT) {\n      this.setState({ page: pages.SCORE });\n    }\n  };\n\n  startGame = () => {\n    const randomNumbers = randomRange(NUMBER_BOX_COUNT);\n    this.setState({ page: pages.GAME, currentNumber: 0, randomNumbers });\n  };\n\n  showIntroduction = () => {\n    this.setState({ page: pages.INTRODUCTION });\n  };\n\n  updateElapsedTime = elapsedTime => {\n    this.setState({ elapsedTime });\n  };\n\n  render() {\n    return (\n      <div className={classnames(\"App\", { doneBody: this.state.page === pages.SCORE })}>\n        <Footer />\n        <PageRenderer\n          currentState={this.state}\n          handleGameClick={this.handleGameClick}\n          startGame={this.startGame}\n          showIntroduction={this.showIntroduction}\n          goFullscreen={goFullscreen}\n          updateElapsedTime={this.updateElapsedTime}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import shuffle from \"just-shuffle\";\n\nexport default function randomRange(toNumber) {\n  return shuffle([...Array(toNumber).keys()]).map(n => n + 1);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\n\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}